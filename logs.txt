============================= test session starts ==============================
platform darwin -- Python 3.10.6, pytest-8.3.5, pluggy-1.5.0 -- /Users/quentinbragard/.pyenv/versions/3.10.6/envs/archimind_backend/bin/python3.10
cachedir: .pytest_cache
rootdir: /Users/quentinbragard/archimind/archimind_backend
plugins: cov-6.0.0, anyio-4.8.0, mock-3.14.0
collecting ... collected 37 items

tests/test_auth.py::test_sign_up_success PASSED                          [  2%]
tests/test_auth.py::test_sign_in_success PASSED                          [  5%]
tests/test_auth.py::test_refresh_token_success PASSED                    [  8%]
tests/test_main.py::test_root_endpoint PASSED                            [ 10%]
tests/test_main.py::test_health_check_healthy PASSED                     [ 13%]
tests/test_main.py::test_health_check_degraded PASSED                    [ 16%]
tests/test_notifications.py::test_get_notifications PASSED               [ 18%]
tests/test_notifications.py::test_get_notification_count PASSED          [ 21%]
tests/test_notifications.py::test_create_notification PASSED             [ 24%]
tests/test_notifications.py::test_mark_notification_read PASSED          [ 27%]
tests/test_notifications.py::test_mark_all_notifications_read PASSED     [ 29%]
tests/test_notifications.py::test_delete_notification PASSED             [ 32%]
tests/test_prompt_templates.py::test_get_templates PASSED                [ 35%]
tests/test_prompt_templates.py::test_get_templates_by_type PASSED        [ 37%]
tests/test_prompt_templates.py::test_create_template PASSED              [ 40%]
tests/test_prompt_templates.py::test_update_template FAILED              [ 43%]
tests/test_prompt_templates.py::test_delete_template PASSED              [ 45%]
tests/test_prompt_templates.py::test_track_template_usage PASSED         [ 48%]
tests/test_prompts_folders.py::test_get_folders FAILED                   [ 51%]
tests/test_prompts_folders.py::test_get_folders_by_type FAILED           [ 54%]
tests/test_prompts_folders.py::test_create_folder PASSED                 [ 56%]
tests/test_prompts_folders.py::test_update_folder PASSED                 [ 59%]
tests/test_prompts_folders.py::test_delete_folder PASSED                 [ 62%]
tests/test_prompts_folders.py::test_pin_folder FAILED                    [ 64%]
tests/test_prompts_folders.py::test_unpin_folder FAILED                  [ 67%]
tests/test_prompts_folders.py::test_update_pinned_folders FAILED         [ 70%]
tests/test_save.py::test_save_message PASSED                             [ 72%]
tests/test_save.py::test_save_chat PASSED                                [ 75%]
tests/test_save.py::test_update_existing_chat PASSED                     [ 78%]
tests/test_save.py::test_save_user_metadata PASSED                       [ 81%]
tests/test_save.py::test_batch_save_messages PASSED                      [ 83%]
tests/test_save.py::test_batch_save_chats PASSED                         [ 86%]
tests/test_save.py::test_combined_batch_save PASSED                      [ 89%]
tests/test_stats.py::test_get_user_stats PASSED                          [ 91%]
tests/test_user.py::test_get_user_metadata PASSED                        [ 94%]
tests/test_user.py::test_get_user_metadata_not_found PASSED              [ 97%]
tests/test_user.py::test_get_folders_with_prompts PASSED                 [100%]

=================================== FAILURES ===================================
_____________________________ test_update_template _____________________________

test_client = <starlette.testclient.TestClient object at 0x107a5ec50>
mock_supabase = {'auth': <MagicMock name='supabase' id='4423274592'>, 'folders': <MagicMock name='supabase' id='4426868256'>, 'helpers': <MagicMock name='supabase' id='4426831360'>, 'notification_service': <MagicMock name='supabase' id='4426839280'>, ...}
valid_auth_header = {'Authorization': 'Bearer fake_valid_token'}
mock_authenticate_user = '00000000-0000-0000-0000-000000000000'

    def test_update_template(test_client, mock_supabase, valid_auth_header, mock_authenticate_user):
        """Test updating an existing template."""
        # Create a more controlled mock chain
        table_mock = MagicMock()
        select_mock = MagicMock()
        eq1_mock = MagicMock()
        eq2_mock = MagicMock()
        update_mock = MagicMock()
        update_eq_mock = MagicMock()
    
        # Set up the mock chain for verification
        verification_data = [{"id": "1"}]
        verification_result = MagicMock()
        verification_result.data = verification_data
    
        # Set up the mock chain for update
        updated_template = {
            "id": "1",
            "folder_id": 1,
            "title": "Updated Template",
            "content": "This is an updated template",
            "type": "user",
            "tags": ["test", "updated"],
            "locale": "en",
            "created_at": "2025-03-15T12:00:00+00:00"
        }
        update_result = MagicMock()
        update_result.data = [updated_template]
    
        # Connect the mocks in the chain
        mock_supabase["prompts"].table.return_value = table_mock
        table_mock.select.return_value = select_mock
        select_mock.eq.return_value = eq1_mock
        eq1_mock.eq.return_value = eq2_mock
        eq2_mock.execute.return_value = verification_result
    
        table_mock.update.return_value = update_mock
        update_mock.eq.return_value = update_eq_mock
        update_eq_mock.execute.return_value = update_result
    
        # Make the request with the test data
        template_data = {
            "folder_id": 1,
            "title": "Updated Template",
            "content": "This is an updated template",
            "type": "user",
            "tags": ["test", "updated"],
            "locale": "en"
        }
    
        # Use comprehensive patching to ensure all parts work
        with patch('utils.supabase_helpers.get_user_from_session_token', return_value=mock_authenticate_user):
            with patch('routes.prompts.templates.supabase', mock_supabase["prompts"]):
                response = test_client.put(
                    "/prompts/templates/1",
                    json=template_data,
                    headers=valid_auth_header
                )
    
        # Assertions
>       assert response.status_code == 200
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/test_prompt_templates.py:188: AssertionError
----------------------------- Captured stdout call -----------------------------
authorization========== <class 'str'>
authorization========== Bearer fake_valid_token
token========== <class 'str'>
user_info========== <MagicMock name='supabase.auth.get_user()' id='4418882720'>
_______________________________ test_get_folders _______________________________

test_client = <starlette.testclient.TestClient object at 0x10780ceb0>
mock_supabase = {'auth': <MagicMock name='supabase' id='4420857392'>, 'folders': <MagicMock name='supabase' id='4421521840'>, 'helpers': <MagicMock name='supabase' id='4425241008'>, 'notification_service': <MagicMock name='supabase' id='4425247824'>, ...}
valid_auth_header = {'Authorization': 'Bearer fake_valid_token'}
mock_authenticate_user = '00000000-0000-0000-0000-000000000000'

    def test_get_folders(test_client, mock_supabase, valid_auth_header, mock_authenticate_user):
        """Test getting all folders."""
        # Mock the folder responses
        mock_user_folders = [
            {
                "id": 1,
                "path": "/user/folder1",
                "type": "user",
                "tags": ["personal"],
                "user_id": mock_authenticate_user
            },
            {
                "id": 2,
                "path": "/user/folder2",
                "type": "user",
                "tags": ["work"],
                "user_id": mock_authenticate_user
            }
        ]
    
        mock_official_folders = [
            {
                "id": 3,
                "path": "/official/folder1",
                "type": "official",
                "tags": ["starter"]
            },
            {
                "id": 4,
                "path": "/official/folder2",
                "type": "official",
                "tags": ["advanced"]
            }
        ]
    
        mock_org_folders = [
            {
                "id": 5,
                "path": "/org/folder1",
                "type": "organization",
                "tags": ["team"]
            }
        ]
    
        # Mock user metadata for pinned folders
        mock_pinned_folders = {
            "official": [3],
            "organization": []
        }
    
        # Setup mock responses directly on the helper functions
        mock_supabase["folders"].get_template_folders_by_type.side_effect = [
            {"success": True, "folders": mock_user_folders},
            {"success": True, "folders": mock_official_folders},
            {"success": True, "folders": mock_org_folders}
        ]
    
        mock_supabase["folders"].get_user_pinned_folders.return_value = mock_pinned_folders
    
        # Make the request
        response = test_client.get("/prompts/folders/", headers=valid_auth_header)
    
        # Assertions
        assert response.status_code == 200
        assert "success" in response.json()
        assert response.json()["success"] == True
    
        # Verify function calls
>       assert mock_supabase["folders"].get_template_folders_by_type.call_count == 3
E       AssertionError: assert 0 == 3
E        +  where 0 = <MagicMock name='supabase.get_template_folders_by_type' id='4424401920'>.call_count
E        +    where <MagicMock name='supabase.get_template_folders_by_type' id='4424401920'> = <MagicMock name='supabase' id='4421521840'>.get_template_folders_by_type

tests/test_prompts_folders.py:72: AssertionError
----------------------------- Captured stdout call -----------------------------
authorization========== <class 'str'>
authorization========== Bearer fake_valid_token
token========== <class 'str'>
user_info========== <MagicMock name='supabase.auth.get_user()' id='4427004080'>
___________________________ test_get_folders_by_type ___________________________

test_client = <starlette.testclient.TestClient object at 0x10791b6a0>
mock_supabase = {'auth': <MagicMock name='supabase' id='4421525920'>, 'folders': <MagicMock name='supabase' id='4417260896'>, 'helpers': <MagicMock name='supabase' id='4417333920'>, 'notification_service': <MagicMock name='supabase' id='4417522416'>, ...}
valid_auth_header = {'Authorization': 'Bearer fake_valid_token'}
mock_authenticate_user = '00000000-0000-0000-0000-000000000000'

    def test_get_folders_by_type(test_client, mock_supabase, valid_auth_header, mock_authenticate_user):
        """Test getting folders by type."""
        # Mock the folder response
        mock_official_folders = [
            {
                "id": 3,
                "path": "/official/folder1",
                "type": "official",
                "tags": ["starter"]
            },
            {
                "id": 4,
                "path": "/official/folder2",
                "type": "official",
                "tags": ["advanced"]
            }
        ]
    
        # Mock user metadata for pinned folders
        mock_pinned_folders = {
            "official": [3],
            "organization": []
        }
    
        # Setup mock responses directly
        mock_supabase["folders"].get_template_folders_by_type.return_value = {
            "success": True,
            "folders": mock_official_folders
        }
    
        mock_supabase["folders"].get_user_pinned_folders.return_value = mock_pinned_folders
    
        # Make the request
        response = test_client.get("/prompts/folders/?type=official", headers=valid_auth_header)
    
        # Assertions
        assert response.status_code == 200
        assert "success" in response.json()
        assert response.json()["success"] == True
    
        # Verify function calls
>       assert mock_supabase["folders"].get_template_folders_by_type.called
E       AssertionError: assert False
E        +  where False = <MagicMock name='supabase.get_template_folders_by_type' id='4415964496'>.called
E        +    where <MagicMock name='supabase.get_template_folders_by_type' id='4415964496'> = <MagicMock name='supabase' id='4417260896'>.get_template_folders_by_type

tests/test_prompts_folders.py:116: AssertionError
----------------------------- Captured stdout call -----------------------------
authorization========== <class 'str'>
authorization========== Bearer fake_valid_token
token========== <class 'str'>
user_info========== <MagicMock name='supabase.auth.get_user()' id='4425203136'>
_______________________________ test_pin_folder ________________________________

test_client = <starlette.testclient.TestClient object at 0x10814b970>
mock_supabase = {'auth': <MagicMock name='supabase' id='4430535248'>, 'folders': <MagicMock name='supabase' id='4418949744'>, 'helpers': <MagicMock name='supabase' id='4418908080'>, 'notification_service': <MagicMock name='supabase' id='4418998080'>, ...}
valid_auth_header = {'Authorization': 'Bearer fake_valid_token'}
mock_authenticate_user = '00000000-0000-0000-0000-000000000000'

    def test_pin_folder(test_client, mock_supabase, valid_auth_header, mock_authenticate_user):
        """Test pinning a folder."""
        # Mock the pinned folders response
        mock_pinned_folders = {
            "official": [2],
            "organization": []
        }
    
        # Mock the update response
        updated_pinned_folders = [1, 2]
    
        # Set up the mocks
        mock_supabase["folders"].get_user_pinned_folders.return_value = mock_pinned_folders
        mock_supabase["folders"].update_user_pinned_folders.return_value = {
            "success": True,
            "pinned_folders": updated_pinned_folders
        }
    
        # Make the request
        response = test_client.post("/prompts/folders/pin/1", headers=valid_auth_header)
    
        # Assertions
        assert response.status_code == 200
        assert response.json()["success"] == True
    
        # Verify helper functions were called correctly
>       assert mock_supabase["folders"].get_user_pinned_folders.called
E       AssertionError: assert False
E        +  where False = <MagicMock name='supabase.get_user_pinned_folders' id='4423621776'>.called
E        +    where <MagicMock name='supabase.get_user_pinned_folders' id='4423621776'> = <MagicMock name='supabase' id='4418949744'>.get_user_pinned_folders

tests/test_prompts_folders.py:250: AssertionError
----------------------------- Captured stdout call -----------------------------
authorization========== <class 'str'>
authorization========== Bearer fake_valid_token
token========== <class 'str'>
user_info========== <MagicMock name='supabase.auth.get_user()' id='4426459904'>
______________________________ test_unpin_folder _______________________________

test_client = <starlette.testclient.TestClient object at 0x107631030>
mock_supabase = {'auth': <MagicMock name='supabase' id='4418908032'>, 'folders': <MagicMock name='supabase' id='4430618512'>, 'helpers': <MagicMock name='supabase' id='4414035984'>, 'notification_service': <MagicMock name='supabase' id='4414032672'>, ...}
valid_auth_header = {'Authorization': 'Bearer fake_valid_token'}
mock_authenticate_user = '00000000-0000-0000-0000-000000000000'

    def test_unpin_folder(test_client, mock_supabase, valid_auth_header, mock_authenticate_user):
        """Test unpinning a folder."""
        # Mock the pinned folders response
        mock_pinned_folders = {
            "official": [1, 2],
            "organization": []
        }
    
        # Mock the update response
        updated_pinned_folders = [2]
    
        # Set up the mocks
        mock_supabase["folders"].get_user_pinned_folders.return_value = mock_pinned_folders
        mock_supabase["folders"].update_user_pinned_folders.return_value = {
            "success": True,
            "pinned_folders": updated_pinned_folders
        }
    
        # Make the request
        response = test_client.post("/prompts/folders/unpin/1", headers=valid_auth_header)
    
        # Assertions
        assert response.status_code == 200
        assert response.json()["success"] == True
    
        # Verify helper functions were called correctly
>       assert mock_supabase["folders"].get_user_pinned_folders.called
E       AssertionError: assert False
E        +  where False = <MagicMock name='supabase.get_user_pinned_folders' id='4431125312'>.called
E        +    where <MagicMock name='supabase.get_user_pinned_folders' id='4431125312'> = <MagicMock name='supabase' id='4430618512'>.get_user_pinned_folders

tests/test_prompts_folders.py:279: AssertionError
----------------------------- Captured stdout call -----------------------------
authorization========== <class 'str'>
authorization========== Bearer fake_valid_token
token========== <class 'str'>
user_info========== <MagicMock name='supabase.auth.get_user()' id='4422685776'>
__________________________ test_update_pinned_folders __________________________

test_client = <starlette.testclient.TestClient object at 0x10815f730>
mock_supabase = {'auth': <MagicMock name='supabase' id='4430618416'>, 'folders': <MagicMock name='supabase' id='4422624224'>, 'helpers': <MagicMock name='supabase' id='4423006384'>, 'notification_service': <MagicMock name='supabase' id='4422342720'>, ...}
valid_auth_header = {'Authorization': 'Bearer fake_valid_token'}
mock_authenticate_user = '00000000-0000-0000-0000-000000000000'

    def test_update_pinned_folders(test_client, mock_supabase, valid_auth_header, mock_authenticate_user):
        """Test updating all pinned folders."""
        # Mock the update responses
        mock_supabase["folders"].update_user_pinned_folders.side_effect = [
            {"success": True, "pinned_folders": [2, 3]},
            {"success": True, "pinned_folders": [5]}
        ]
    
        # Make the request
        request_data = {
            "official_folder_ids": [2, 3],
            "organization_folder_ids": [5]
        }
    
        response = test_client.post("/prompts/folders/update-pinned", json=request_data, headers=valid_auth_header)
    
        # Assertions
        assert response.status_code == 200
        assert response.json()["success"] == True
        assert "pinnedOfficialFolderIds" in response.json()
        assert "pinnedOrganizationFolderIds" in response.json()
    
        # Verify helper functions were called correctly
>       assert mock_supabase["folders"].update_user_pinned_folders.call_count == 2
E       AssertionError: assert 0 == 2
E        +  where 0 = <MagicMock name='supabase.update_user_pinned_folders' id='4425067312'>.call_count
E        +    where <MagicMock name='supabase.update_user_pinned_folders' id='4425067312'> = <MagicMock name='supabase' id='4422624224'>.update_user_pinned_folders

tests/test_prompts_folders.py:305: AssertionError
----------------------------- Captured stdout call -----------------------------
authorization========== <class 'str'>
authorization========== Bearer fake_valid_token
token========== <class 'str'>
user_info========== <MagicMock name='supabase.auth.get_user()' id='4420850096'>
=========================== short test summary info ============================
FAILED tests/test_prompt_templates.py::test_update_template - assert 500 == 200
FAILED tests/test_prompts_folders.py::test_get_folders - AssertionError: asse...
FAILED tests/test_prompts_folders.py::test_get_folders_by_type - AssertionErr...
FAILED tests/test_prompts_folders.py::test_pin_folder - AssertionError: asser...
FAILED tests/test_prompts_folders.py::test_unpin_folder - AssertionError: ass...
FAILED tests/test_prompts_folders.py::test_update_pinned_folders - AssertionE...
========================= 6 failed, 31 passed in 4.84s =========================
