============================= test session starts ==============================
platform darwin -- Python 3.10.6, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/quentinbragard/archimind/archimind_backend
plugins: cov-6.0.0, anyio-4.8.0, mock-3.14.0
collected 37 items

tests/test_auth.py .F.                                                   [  8%]
tests/test_main.py ..F                                                   [ 16%]
tests/test_notifications.py ......                                       [ 32%]
tests/test_prompt_templates.py FFFFFF                                    [ 48%]
tests/test_prompts_folders.py FFFFFFFF                                   [ 70%]
tests/test_save.py FFFFFF.                                               [ 89%]
tests/test_stats.py .                                                    [ 91%]
tests/test_user.py F..                                                   [100%]

=================================== FAILURES ===================================
_____________________________ test_sign_in_success _____________________________

test_client = <starlette.testclient.TestClient object at 0x109f7cf10>
mock_supabase = {'auth': <MagicMock name='supabase' id='4462210608'>, 'folders': <MagicMock name='supabase' id='4465548816'>, 'helpers': <MagicMock name='supabase' id='4465589072'>, 'notification_service': <MagicMock name='supabase' id='4465613536'>, ...}

    def test_sign_in_success(test_client, mock_supabase):
        """Test successful user sign in."""
        # Create proper mock response objects
        # User mock
        user_mock = MagicMock()
        user_mock.id = "test-user-id"
        user_mock.email = "test@example.com"
        user_mock.__dict__ = {"id": "test-user-id", "email": "test@example.com"}
    
        # Session mock
        session_mock = MagicMock()
        session_mock.access_token = "fake_access_token"
        session_mock.refresh_token = "fake_refresh_token"
        session_mock.expires_at = 3600
    
        # Response object
        auth_response = MagicMock()
>       auth_response.user = user_mock

tests/test_auth.py:70: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../.pyenv/versions/3.10.6/lib/python3.10/unittest/mock.py:771: in __setattr__
    if _check_and_set_parent(self, value, name, name):
../../.pyenv/versions/3.10.6/lib/python3.10/unittest/mock.py:365: in _check_and_set_parent
    if ((value._mock_name or value._mock_new_name) or
../../.pyenv/versions/3.10.6/lib/python3.10/unittest/mock.py:632: in __getattr__
    elif self._mock_methods is not None:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError('_mock_methods') raised in repr()] MagicMock object at 0x109f76f50>
name = '_mock_methods'

    def __getattr__(self, name):
        if name in {'_mock_methods', '_mock_unsafe'}:
>           raise AttributeError(name)
E           AttributeError: _mock_methods

../../.pyenv/versions/3.10.6/lib/python3.10/unittest/mock.py:631: AttributeError
__________________________ test_health_check_degraded __________________________

self = <MagicMock name='supabase.storage.list_buckets' id='4471327520'>

    def assert_called_once(self):
        """assert that the mock was called only once.
        """
        if not self.call_count == 1:
            msg = ("Expected '%s' to have been called once. Called %s times.%s"
                   % (self._mock_name or 'mock',
                      self.call_count,
                      self._calls_repr()))
>           raise AssertionError(msg)
E           AssertionError: Expected 'list_buckets' to have been called once. Called 0 times.

../../.pyenv/versions/3.10.6/lib/python3.10/unittest/mock.py:898: AssertionError

During handling of the above exception, another exception occurred:

test_client = <starlette.testclient.TestClient object at 0x109fc9ba0>
mock_supabase = {'auth': <MagicMock name='supabase' id='4469731248'>, 'folders': <MagicMock name='supabase' id='4471542384'>, 'helpers': <MagicMock name='supabase' id='4471582592'>, 'notification_service': <MagicMock name='supabase' id='4471590624'>, ...}

    def test_health_check_degraded(test_client, mock_supabase):
        """Test the health check endpoint when database is unhealthy."""
        # Patch the database connection to raise an exception
        mock_supabase["stats"].storage.list_buckets.side_effect = Exception("Database connection error")
    
        # Make the request - don't assert on status code since the code might not be handling it properly
        response = test_client.get("/health")
    
        # Verify the mock was called
>       mock_supabase["stats"].storage.list_buckets.assert_called_once()
E       AssertionError: Expected 'list_buckets' to have been called once. Called 0 times.

tests/test_main.py:38: AssertionError
______________________________ test_get_templates ______________________________

test_client = <starlette.testclient.TestClient object at 0x109fbdb70>
mock_supabase = {'auth': <MagicMock name='supabase' id='4462662352'>, 'folders': <MagicMock name='supabase' id='4466310208'>, 'helpers': <MagicMock name='supabase' id='4466186640'>, 'notification_service': <MagicMock name='supabase' id='4466194656'>, ...}
valid_auth_header = {'Authorization': 'Bearer fake_valid_token'}
mock_authenticate_user = '00000000-0000-0000-0000-000000000000'

    def test_get_templates(test_client, mock_supabase, valid_auth_header, mock_authenticate_user):
        """Test getting all templates."""
        # Mock the templates response
        mock_user_templates = [
            {
                "id": 1,
                "folder_id": 1,
                "title": "User Template 1",
                "content": "This is a user template",
                "type": "user",
                "tags": ["personal"],
                "locale": "en"
            },
            {
                "id": 2,
                "folder_id": 2,
                "title": "User Template 2",
                "content": "This is another user template",
                "type": "user",
                "tags": ["work"],
                "locale": "en"
            }
        ]
    
        mock_official_templates = [
            {
                "id": 3,
                "folder_id": 3,
                "title": "Official Template 1",
                "content": "This is an official template",
                "type": "official",
                "tags": ["starter"],
                "locale": "en"
            }
        ]
    
        mock_org_templates = [
            {
                "id": 4,
                "folder_id": 5,
                "title": "Organization Template 1",
                "content": "This is an organization template",
                "type": "organization",
                "tags": ["team"],
                "locale": "en"
            }
        ]
    
        # Mock folders
        mock_user_folders = [
            {"id": 1, "path": "/user/folder1", "templates": mock_user_templates[:1]},
            {"id": 2, "path": "/user/folder2", "templates": mock_user_templates[1:]}
        ]
    
        mock_official_folders = [
            {"id": 3, "path": "/official/folder1", "templates": mock_official_templates, "is_pinned": True}
        ]
    
        mock_org_folders = [
            {"id": 5, "path": "/org/folder1", "templates": mock_org_templates, "is_pinned": False}
        ]
    
        # Setup mock responses
        mock_supabase["templates"].get_all_templates = MagicMock(
            return_value={
                "success": True,
                "pinnedFolders": {
                    "userTemplates": {
                        "templates": mock_user_templates,
                        "folders": mock_user_folders
                    },
                    "officialTemplates": {
                        "templates": mock_official_templates,
                        "folders": mock_official_folders
                    },
                    "organizationTemplates": {
                        "templates": mock_org_templates,
                        "folders": mock_org_folders
                    }
                }
            }
        )
    
        # Make the request
        response = test_client.get("/prompts/templates/", headers=valid_auth_header)
    
        # Assertions
        assert response.status_code == 200
        assert "success" in response.json()
        assert response.json()["success"] == True
        assert "pinnedFolders" in response.json()
        assert "userTemplates" in response.json()["pinnedFolders"]
        assert "officialTemplates" in response.json()["pinnedFolders"]
        assert "organizationTemplates" in response.json()["pinnedFolders"]
    
        # Check template counts
>       assert len(response.json()["pinnedFolders"]["userTemplates"]["templates"]) == 2
E       assert 0 == 2
E        +  where 0 = len([])

tests/test_prompt_templates.py:100: AssertionError
----------------------------- Captured stdout call -----------------------------
authorization========== <class 'str'>
authorization========== Bearer fake_valid_token
token========== <class 'str'>
user_info========== <MagicMock name='supabase.auth.get_user()' id='4468156128'>
__________________________ test_get_templates_by_type __________________________

test_client = <starlette.testclient.TestClient object at 0x10a39b9d0>
mock_supabase = {'auth': <MagicMock name='supabase' id='4466514608'>, 'folders': <MagicMock name='supabase' id='4472058160'>, 'helpers': <MagicMock name='supabase' id='4471594656'>, 'notification_service': <MagicMock name='supabase' id='4472135472'>, ...}
valid_auth_header = {'Authorization': 'Bearer fake_valid_token'}
mock_authenticate_user = '00000000-0000-0000-0000-000000000000'

    def test_get_templates_by_type(test_client, mock_supabase, valid_auth_header, mock_authenticate_user):
        """Test getting templates by type."""
        # Mock the templates response for a specific type
        mock_official_templates = [
            {
                "id": 3,
                "folder_id": 3,
                "title": "Official Template 1",
                "content": "This is an official template",
                "type": "official",
                "tags": ["starter"],
                "locale": "en"
            },
            {
                "id": 4,
                "folder_id": 3,
                "title": "Official Template 2",
                "content": "This is another official template",
                "type": "official",
                "tags": ["advanced"],
                "locale": "en"
            }
        ]
    
        mock_folders = ["official/folder1", "official/folder2"]
    
        # Setup mock response
        mock_supabase["templates"].get_official_templates = MagicMock(
            return_value={
                "success": True,
                "templates": mock_official_templates,
                "folders": mock_folders
            }
        )
    
        # Make the request
        response = test_client.get("/prompts/templates/?type=official", headers=valid_auth_header)
    
        # Assertions
        assert response.status_code == 200
        assert "success" in response.json()
        assert response.json()["success"] == True
        assert "templates" in response.json()
        assert "folders" in response.json()
>       assert len(response.json()["templates"]) == 2
E       assert 0 == 2
E        +  where 0 = len({})

tests/test_prompt_templates.py:151: AssertionError
----------------------------- Captured stdout call -----------------------------
authorization========== <class 'str'>
authorization========== Bearer fake_valid_token
token========== <class 'str'>
user_info========== <MagicMock name='supabase.auth.get_user()' id='4471954384'>
user_id========================================== 00000000-0000-0000-0000-000000000000
_____________________________ test_create_template _____________________________

self = <MagicMock name='supabase.table().insert' id='4473126576'>

    def assert_called_once(self):
        """assert that the mock was called only once.
        """
        if not self.call_count == 1:
            msg = ("Expected '%s' to have been called once. Called %s times.%s"
                   % (self._mock_name or 'mock',
                      self.call_count,
                      self._calls_repr()))
>           raise AssertionError(msg)
E           AssertionError: Expected 'insert' to have been called once. Called 2 times.
E           Calls: [call(),
E            call({'type': 'user', 'folder_id': 1, 'title': 'New Template', 'content': 'This is a new template', 'tags': ['test'], 'locale': 'en'}),
E            call().execute()].

../../.pyenv/versions/3.10.6/lib/python3.10/unittest/mock.py:898: AssertionError

During handling of the above exception, another exception occurred:

test_client = <starlette.testclient.TestClient object at 0x109fb3ee0>
mock_supabase = {'auth': <MagicMock name='supabase' id='4462419232'>, 'folders': <MagicMock name='supabase' id='4467484048'>, 'helpers': <MagicMock name='supabase' id='4467640208'>, 'notification_service': <MagicMock name='supabase' id='4467648224'>, ...}
valid_auth_header = {'Authorization': 'Bearer fake_valid_token'}
mock_authenticate_user = '00000000-0000-0000-0000-000000000000'

    def test_create_template(test_client, mock_supabase, valid_auth_header, mock_authenticate_user):
        """Test creating a new template."""
        # Mock the template creation response
        created_template = {
            "id": 5,
            "folder_id": 1,
            "title": "New Template",
            "content": "This is a new template",
            "type": "user",
            "tags": ["test"],
            "locale": "en",
            "created_at": "2025-03-15T12:00:00+00:00"
        }
    
        mock_supabase["templates"].table().insert().execute.return_value.data = [created_template]
    
        # Make the request
        template_data = {
            "folder_id": 1,
            "title": "New Template",
            "content": "This is a new template",
            "type": "user",
            "tags": ["test"],
            "locale": "en"
        }
    
        response = test_client.post("/prompts/templates/", json=template_data, headers=valid_auth_header)
    
        # Assertions
        assert response.status_code == 200
        assert response.json()["success"] == True
        assert "template" in response.json()
        assert response.json()["template"]["id"] == 5
        assert response.json()["template"]["title"] == "New Template"
    
        # Verify Supabase client was called correctly
        mock_supabase["templates"].table.assert_called_with("prompt_templates")
>       mock_supabase["templates"].table().insert.assert_called_once()
E       AssertionError: Expected 'insert' to have been called once. Called 2 times.
E       Calls: [call(),
E        call({'type': 'user', 'folder_id': 1, 'title': 'New Template', 'content': 'This is a new template', 'tags': ['test'], 'locale': 'en'}),
E        call().execute()].
E       
E       pytest introspection follows:
E       
E       Args:
E       assert ({'content': ...test'], ...},) == ()
E         
E         Left contains one more item: {'content': 'This is a new template', 'folder_id': 1, 'locale': 'en', 'tags': ['test'], ...}
E         Use -v to get more diff

tests/test_prompt_templates.py:194: AssertionError
----------------------------- Captured stdout call -----------------------------
authorization========== <class 'str'>
authorization========== Bearer fake_valid_token
token========== <class 'str'>
user_info========== <MagicMock name='supabase.auth.get_user()' id='4464121008'>
_____________________________ test_update_template _____________________________

test_client = <starlette.testclient.TestClient object at 0x10a4ac730>
mock_supabase = {'auth': <MagicMock name='supabase' id='4467648128'>, 'folders': <MagicMock name='supabase' id='4467633232'>, 'helpers': <MagicMock name='supabase' id='4466265488'>, 'notification_service': <MagicMock name='supabase' id='4466272784'>, ...}
valid_auth_header = {'Authorization': 'Bearer fake_valid_token'}
mock_authenticate_user = '00000000-0000-0000-0000-000000000000'

    def test_update_template(test_client, mock_supabase, valid_auth_header, mock_authenticate_user):
        """Test updating an existing template."""
        # Mock the verification response
        mock_supabase["templates"].table().select().eq().eq().execute.return_value.data = [{"id": "1"}]
    
        # Mock the update response
        updated_template = {
            "id": "1",
            "folder_id": 1,
            "title": "Updated Template",
            "content": "This is an updated template",
            "type": "user",
            "tags": ["test", "updated"],
            "locale": "en",
            "created_at": "2025-03-15T12:00:00+00:00"
        }
    
        mock_supabase["templates"].table().update().eq().execute.return_value.data = [updated_template]
    
        # Make the request
        template_data = {
            "folder_id": 1,
            "title": "Updated Template",
            "content": "This is an updated template",
            "type": "user",
            "tags": ["test", "updated"],
            "locale": "en"
        }
    
        response = test_client.put("/prompts/templates/1", json=template_data, headers=valid_auth_header)
    
        # Assertions
>       assert response.status_code == 200
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/test_prompt_templates.py:233: AssertionError
----------------------------- Captured stdout call -----------------------------
authorization========== <class 'str'>
authorization========== Bearer fake_valid_token
token========== <class 'str'>
user_info========== <MagicMock name='supabase.auth.get_user()' id='4467796592'>
_____________________________ test_delete_template _____________________________

self = <MagicMock name='supabase.table().delete' id='4470123840'>

    def assert_called_once(self):
        """assert that the mock was called only once.
        """
        if not self.call_count == 1:
            msg = ("Expected '%s' to have been called once. Called %s times.%s"
                   % (self._mock_name or 'mock',
                      self.call_count,
                      self._calls_repr()))
>           raise AssertionError(msg)
E           AssertionError: Expected 'delete' to have been called once. Called 2 times.
E           Calls: [call(), call().eq(), call(), call().eq('id', '1'), call().eq().execute()].

../../.pyenv/versions/3.10.6/lib/python3.10/unittest/mock.py:898: AssertionError

During handling of the above exception, another exception occurred:

test_client = <starlette.testclient.TestClient object at 0x10a4a8ca0>
mock_supabase = {'auth': <MagicMock name='supabase' id='4467633472'>, 'folders': <MagicMock name='supabase' id='4462482992'>, 'helpers': <MagicMock name='supabase' id='4462315024'>, 'notification_service': <MagicMock name='supabase' id='4462323040'>, ...}
valid_auth_header = {'Authorization': 'Bearer fake_valid_token'}
mock_authenticate_user = '00000000-0000-0000-0000-000000000000'

    def test_delete_template(test_client, mock_supabase, valid_auth_header, mock_authenticate_user):
        """Test deleting a template."""
        # Mock the verification response
        mock_supabase["templates"].table().select().eq().eq().execute.return_value.data = [{"id": "1"}]
    
        # Mock the delete response
        mock_supabase["templates"].table().delete().eq().execute.return_value.data = [{"id": "1"}]
    
        # Make the request
        response = test_client.delete("/prompts/templates/1", headers=valid_auth_header)
    
        # Assertions
        assert response.status_code == 200
        assert response.json()["success"] == True
        assert response.json()["message"] == "Template deleted"
    
        # Verify Supabase client was called correctly
        mock_supabase["templates"].table.assert_called_with("prompt_templates")
        mock_supabase["templates"].table().select().eq.assert_called_with("id", "1")
        mock_supabase["templates"].table().select().eq().eq.assert_called_with("user_id", mock_authenticate_user)
>       mock_supabase["templates"].table().delete.assert_called_once()
E       AssertionError: Expected 'delete' to have been called once. Called 2 times.
E       Calls: [call(), call().eq(), call(), call().eq('id', '1'), call().eq().execute()].

tests/test_prompt_templates.py:265: AssertionError
----------------------------- Captured stdout call -----------------------------
authorization========== <class 'str'>
authorization========== Bearer fake_valid_token
token========== <class 'str'>
user_info========== <MagicMock name='supabase.auth.get_user()' id='4465940448'>
__________________________ test_track_template_usage ___________________________

self = <MagicMock name='supabase.table().update' id='4464460560'>

    def assert_called_once(self):
        """assert that the mock was called only once.
        """
        if not self.call_count == 1:
            msg = ("Expected '%s' to have been called once. Called %s times.%s"
                   % (self._mock_name or 'mock',
                      self.call_count,
                      self._calls_repr()))
>           raise AssertionError(msg)
E           AssertionError: Expected 'update' to have been called once. Called 2 times.
E           Calls: [call(),
E            call().eq(),
E            call({'usage_count': 6, 'last_used_at': 'now()'}),
E            call().eq('id', '1'),
E            call().eq().execute()].

../../.pyenv/versions/3.10.6/lib/python3.10/unittest/mock.py:898: AssertionError

During handling of the above exception, another exception occurred:

test_client = <starlette.testclient.TestClient object at 0x109f905b0>
mock_supabase = {'auth': <MagicMock name='supabase' id='4462485440'>, 'folders': <MagicMock name='supabase' id='4470406592'>, 'helpers': <MagicMock name='supabase' id='4466830608'>, 'notification_service': <MagicMock name='supabase' id='4466134176'>, ...}
valid_auth_header = {'Authorization': 'Bearer fake_valid_token'}
mock_authenticate_user = '00000000-0000-0000-0000-000000000000'

    def test_track_template_usage(test_client, mock_supabase, valid_auth_header, mock_authenticate_user):
        """Test tracking template usage."""
        # Mock the template response
        template = {
            "id": "1",
            "folder_id": 1,
            "title": "Test Template",
            "content": "This is a test template",
            "type": "user",
            "tags": ["test"],
            "locale": "en",
            "usage_count": 5,
            "last_used_at": "2025-03-10T12:00:00+00:00"
        }
    
        mock_supabase["templates"].table().select().eq().single().execute.return_value.data = template
    
        # Mock the update response
        updated_template = {
            **template,
            "usage_count": 6,
            "last_used_at": "2025-03-15T12:00:00+00:00"
        }
    
        mock_supabase["templates"].table().update().eq().execute.return_value.data = [updated_template]
    
        # Make the request
        response = test_client.post("/prompts/templates/use/1", headers=valid_auth_header)
    
        # Assertions
        assert response.status_code == 200
        assert response.json()["success"] == True
        assert "usage_count" in response.json()
        assert response.json()["usage_count"] == 6
    
        # Verify Supabase client was called correctly
        mock_supabase["templates"].table.assert_called_with("prompt_templates")
        mock_supabase["templates"].table().select().eq.assert_called_with("id", "1")
>       mock_supabase["templates"].table().update.assert_called_once()
E       AssertionError: Expected 'update' to have been called once. Called 2 times.
E       Calls: [call(),
E        call().eq(),
E        call({'usage_count': 6, 'last_used_at': 'now()'}),
E        call().eq('id', '1'),
E        call().eq().execute()].
E       
E       pytest introspection follows:
E       
E       Args:
E       assert ({'last_used_...e_count': 6},) == ()
E         
E         Left contains one more item: {'last_used_at': 'now()', 'usage_count': 6}
E         Use -v to get more diff

tests/test_prompt_templates.py:306: AssertionError
----------------------------- Captured stdout call -----------------------------
authorization========== <class 'str'>
authorization========== Bearer fake_valid_token
token========== <class 'str'>
user_info========== <MagicMock name='supabase.auth.get_user()' id='4472718768'>
_______________________________ test_get_folders _______________________________

test_client = <starlette.testclient.TestClient object at 0x10a74fe50>
mock_supabase = {'auth': <MagicMock name='supabase' id='4470394784'>, 'folders': <MagicMock name='supabase' id='4463301664'>, 'helpers': <MagicMock name='supabase' id='4463227424'>, 'notification_service': <MagicMock name='supabase' id='4462875056'>, ...}
valid_auth_header = {'Authorization': 'Bearer fake_valid_token'}
mock_authenticate_user = '00000000-0000-0000-0000-000000000000'

    def test_get_folders(test_client, mock_supabase, valid_auth_header, mock_authenticate_user):
        """Test getting all folders."""
        # Mock the folder responses
        mock_user_folders = [
            {
                "id": 1,
                "path": "/user/folder1",
                "type": "user",
                "tags": ["personal"],
                "user_id": mock_authenticate_user
            },
            {
                "id": 2,
                "path": "/user/folder2",
                "type": "user",
                "tags": ["work"],
                "user_id": mock_authenticate_user
            }
        ]
    
        mock_official_folders = [
            {
                "id": 3,
                "path": "/official/folder1",
                "type": "official",
                "tags": ["starter"]
            },
            {
                "id": 4,
                "path": "/official/folder2",
                "type": "official",
                "tags": ["advanced"]
            }
        ]
    
        mock_org_folders = [
            {
                "id": 5,
                "path": "/org/folder1",
                "type": "organization",
                "tags": ["team"]
            }
        ]
    
        # Mock user metadata for pinned folders
        mock_pinned_folders = {
            "official": [3],
            "organization": []
        }
    
        # Setup mock responses
        mock_supabase["folders"].get_template_folders_by_type = MagicMock()
        mock_supabase["folders"].get_template_folders_by_type.side_effect = [
            {"success": True, "folders": mock_user_folders},
            {"success": True, "folders": mock_official_folders},
            {"success": True, "folders": mock_org_folders}
        ]
    
        mock_supabase["folders"].get_user_pinned_folders = MagicMock(return_value=mock_pinned_folders)
    
        # Make the request
        response = test_client.get("/prompts/folders/", headers=valid_auth_header)
    
        # Assertions
        assert response.status_code == 200
        assert "success" in response.json()
        assert response.json()["success"] == True
        assert "userFolders" in response.json()
        assert "officialFolders" in response.json()
        assert "organizationFolders" in response.json()
    
        # Check the number of folders
>       assert len(response.json()["userFolders"]) == 2
E       assert 0 == 2
E        +  where 0 = len([])

tests/test_prompts_folders.py:76: AssertionError
----------------------------- Captured stdout call -----------------------------
authorization========== <class 'str'>
authorization========== Bearer fake_valid_token
token========== <class 'str'>
user_info========== <MagicMock name='supabase.auth.get_user()' id='4467625792'>
___________________________ test_get_folders_by_type ___________________________

test_client = <starlette.testclient.TestClient object at 0x10a0a0a90>
mock_supabase = {'auth': <MagicMock name='supabase' id='4463406304'>, 'folders': <MagicMock name='supabase' id='4462712272'>, 'helpers': <MagicMock name='supabase' id='4462423312'>, 'notification_service': <MagicMock name='supabase' id='4462696368'>, ...}
valid_auth_header = {'Authorization': 'Bearer fake_valid_token'}
mock_authenticate_user = '00000000-0000-0000-0000-000000000000'

    def test_get_folders_by_type(test_client, mock_supabase, valid_auth_header, mock_authenticate_user):
        """Test getting folders by type."""
        # Mock the folder response
        mock_official_folders = [
            {
                "id": 3,
                "path": "/official/folder1",
                "type": "official",
                "tags": ["starter"]
            },
            {
                "id": 4,
                "path": "/official/folder2",
                "type": "official",
                "tags": ["advanced"]
            }
        ]
    
        # Mock user metadata for pinned folders
        mock_pinned_folders = {
            "official": [3],
            "organization": []
        }
    
        # Setup mock responses
        mock_supabase["folders"].get_template_folders_by_type = MagicMock(
            return_value={"success": True, "folders": mock_official_folders}
        )
    
        mock_supabase["folders"].get_user_pinned_folders = MagicMock(return_value=mock_pinned_folders)
    
        # Make the request
        response = test_client.get("/prompts/folders/?type=official", headers=valid_auth_header)
    
        # Assertions
        assert response.status_code == 200
        assert "success" in response.json()
        assert response.json()["success"] == True
        assert "folders" in response.json()
>       assert len(response.json()["folders"]) == 2
E       assert 0 == 2
E        +  where 0 = len([])

tests/test_prompts_folders.py:123: AssertionError
----------------------------- Captured stdout call -----------------------------
authorization========== <class 'str'>
authorization========== Bearer fake_valid_token
token========== <class 'str'>
user_info========== <MagicMock name='supabase.auth.get_user()' id='4465954768'>
______________________________ test_create_folder ______________________________

self = <MagicMock name='supabase.table().insert' id='4474259824'>

    def assert_called_once(self):
        """assert that the mock was called only once.
        """
        if not self.call_count == 1:
            msg = ("Expected '%s' to have been called once. Called %s times.%s"
                   % (self._mock_name or 'mock',
                      self.call_count,
                      self._calls_repr()))
>           raise AssertionError(msg)
E           AssertionError: Expected 'insert' to have been called once. Called 2 times.
E           Calls: [call(),
E            call({'user_id': '00000000-0000-0000-0000-000000000000', 'name': 'New Folder', 'path': '/user/new-folder', 'description': 'A new folder for testing'}),
E            call().execute()].

../../.pyenv/versions/3.10.6/lib/python3.10/unittest/mock.py:898: AssertionError

During handling of the above exception, another exception occurred:

test_client = <starlette.testclient.TestClient object at 0x10a0d59f0>
mock_supabase = {'auth': <MagicMock name='supabase' id='4462712320'>, 'folders': <MagicMock name='supabase' id='4470162576'>, 'helpers': <MagicMock name='supabase' id='4470502352'>, 'notification_service': <MagicMock name='supabase' id='4470920032'>, ...}
valid_auth_header = {'Authorization': 'Bearer fake_valid_token'}
mock_authenticate_user = '00000000-0000-0000-0000-000000000000'

    def test_create_folder(test_client, mock_supabase, valid_auth_header, mock_authenticate_user):
        """Test creating a new folder."""
        # Mock the folder creation response
        created_folder = {
            "id": 6,
            "path": "/user/new-folder",
            "name": "New Folder",
            "description": "A new folder for testing",
            "type": "user",
            "tags": ["test"],
            "user_id": mock_authenticate_user,
            "created_at": "2025-03-15T12:00:00+00:00"
        }
    
        mock_supabase["folders"].table().insert().execute.return_value.data = [created_folder]
    
        # Make the request
        folder_data = {
            "name": "New Folder",
            "path": "/user/new-folder",
            "description": "A new folder for testing"
        }
    
        response = test_client.post("/prompts/folders/", json=folder_data, headers=valid_auth_header)
    
        # Assertions
        assert response.status_code == 200
        assert response.json()["success"] == True
        assert "folder" in response.json()
        assert response.json()["folder"]["id"] == 6
        assert response.json()["folder"]["name"] == "New Folder"
        assert response.json()["folder"]["path"] == "/user/new-folder"
    
        # Verify Supabase client was called correctly
        mock_supabase["folders"].table.assert_called_with("user_folders")
>       mock_supabase["folders"].table().insert.assert_called_once()
E       AssertionError: Expected 'insert' to have been called once. Called 2 times.
E       Calls: [call(),
E        call({'user_id': '00000000-0000-0000-0000-000000000000', 'name': 'New Folder', 'path': '/user/new-folder', 'description': 'A new folder for testing'}),
E        call().execute()].
E       
E       pytest introspection follows:
E       
E       Args:
E       assert ({'descriptio...0000000000'},) == ()
E         
E         Left contains one more item: {'description': 'A new folder for testing', 'name': 'New Folder', 'path': '/user/new-folder', 'user_id': '00000000-0000-0000-0000-000000000000'}
E         Use -v to get more diff

tests/test_prompts_folders.py:164: AssertionError
----------------------------- Captured stdout call -----------------------------
authorization========== <class 'str'>
authorization========== Bearer fake_valid_token
token========== <class 'str'>
user_info========== <MagicMock name='supabase.auth.get_user()' id='4470587152'>
______________________________ test_update_folder ______________________________

self = <MagicMock name='supabase.table().update' id='4467340720'>

    def assert_called_once(self):
        """assert that the mock was called only once.
        """
        if not self.call_count == 1:
            msg = ("Expected '%s' to have been called once. Called %s times.%s"
                   % (self._mock_name or 'mock',
                      self.call_count,
                      self._calls_repr()))
>           raise AssertionError(msg)
E           AssertionError: Expected 'update' to have been called once. Called 2 times.
E           Calls: [call(),
E            call().eq(),
E            call({'name': 'Updated Folder', 'path': '/user/updated-folder', 'description': 'An updated folder for testing'}),
E            call().eq('id', 1),
E            call().eq().execute()].

../../.pyenv/versions/3.10.6/lib/python3.10/unittest/mock.py:898: AssertionError

During handling of the above exception, another exception occurred:

test_client = <starlette.testclient.TestClient object at 0x10a765450>
mock_supabase = {'auth': <MagicMock name='supabase' id='4470502304'>, 'folders': <MagicMock name='supabase' id='4462767232'>, 'helpers': <MagicMock name='supabase' id='4467126528'>, 'notification_service': <MagicMock name='supabase' id='4467114960'>, ...}
valid_auth_header = {'Authorization': 'Bearer fake_valid_token'}
mock_authenticate_user = '00000000-0000-0000-0000-000000000000'

    def test_update_folder(test_client, mock_supabase, valid_auth_header, mock_authenticate_user):
        """Test updating an existing folder."""
        # Mock the verification response
        mock_supabase["folders"].table().select().eq().eq().execute.return_value.data = [{"id": 1}]
    
        # Mock the update response
        updated_folder = {
            "id": 1,
            "path": "/user/updated-folder",
            "name": "Updated Folder",
            "description": "An updated folder for testing",
            "type": "user",
            "tags": ["test", "updated"],
            "user_id": mock_authenticate_user,
            "created_at": "2025-03-15T12:00:00+00:00"
        }
    
        mock_supabase["folders"].table().update().eq().execute.return_value.data = [updated_folder]
    
        # Make the request
        folder_data = {
            "name": "Updated Folder",
            "path": "/user/updated-folder",
            "description": "An updated folder for testing"
        }
    
        response = test_client.put("/prompts/folders/1", json=folder_data, headers=valid_auth_header)
    
        # Assertions
        assert response.status_code == 200
        assert response.json()["success"] == True
        assert "folder" in response.json()
        assert response.json()["folder"]["id"] == 1
        assert response.json()["folder"]["name"] == "Updated Folder"
        assert response.json()["folder"]["path"] == "/user/updated-folder"
    
        # Verify Supabase client was called correctly
        mock_supabase["folders"].table.assert_called_with("user_folders")
        mock_supabase["folders"].table().select().eq.assert_called_with("id", 1)
        mock_supabase["folders"].table().select().eq().eq.assert_called_with("user_id", mock_authenticate_user)
>       mock_supabase["folders"].table().update.assert_called_once()
E       AssertionError: Expected 'update' to have been called once. Called 2 times.
E       Calls: [call(),
E        call().eq(),
E        call({'name': 'Updated Folder', 'path': '/user/updated-folder', 'description': 'An updated folder for testing'}),
E        call().eq('id', 1),
E        call().eq().execute()].
E       
E       pytest introspection follows:
E       
E       Args:
E       assert ({'descriptio...ted-folder'},) == ()
E         
E         Left contains one more item: {'description': 'An updated folder for testing', 'name': 'Updated Folder', 'path': '/user/updated-folder'}
E         Use -v to get more diff

tests/test_prompts_folders.py:211: AssertionError
----------------------------- Captured stdout call -----------------------------
authorization========== <class 'str'>
authorization========== Bearer fake_valid_token
token========== <class 'str'>
user_info========== <MagicMock name='supabase.auth.get_user()' id='4465970960'>
______________________________ test_delete_folder ______________________________

self = <MagicMock name='supabase.table().delete' id='4470039040'>

    def assert_called_once(self):
        """assert that the mock was called only once.
        """
        if not self.call_count == 1:
            msg = ("Expected '%s' to have been called once. Called %s times.%s"
                   % (self._mock_name or 'mock',
                      self.call_count,
                      self._calls_repr()))
>           raise AssertionError(msg)
E           AssertionError: Expected 'delete' to have been called once. Called 2 times.
E           Calls: [call(), call().eq(), call(), call().eq('id', 1), call().eq().execute()].

../../.pyenv/versions/3.10.6/lib/python3.10/unittest/mock.py:898: AssertionError

During handling of the above exception, another exception occurred:

test_client = <starlette.testclient.TestClient object at 0x10a42c550>
mock_supabase = {'auth': <MagicMock name='supabase' id='4461541936'>, 'folders': <MagicMock name='supabase' id='4464858768'>, 'helpers': <MagicMock name='supabase' id='4468466608'>, 'notification_service': <MagicMock name='supabase' id='4468467040'>, ...}
valid_auth_header = {'Authorization': 'Bearer fake_valid_token'}
mock_authenticate_user = '00000000-0000-0000-0000-000000000000'

    def test_delete_folder(test_client, mock_supabase, valid_auth_header, mock_authenticate_user):
        """Test deleting a folder."""
        # Mock the verification response
        mock_supabase["folders"].table().select().eq().eq().execute.return_value.data = [{"id": 1}]
    
        # Mock the delete response
        mock_supabase["folders"].table().delete().eq().execute.return_value.data = [{"id": 1}]
    
        # Make the request
        response = test_client.delete("/prompts/folders/1", headers=valid_auth_header)
    
        # Assertions
        assert response.status_code == 200
        assert response.json()["success"] == True
        assert response.json()["message"] == "Folder deleted"
    
        # Verify Supabase client was called correctly
        mock_supabase["folders"].table.assert_called_with("user_folders")
        mock_supabase["folders"].table().select().eq.assert_called_with("id", 1)
        mock_supabase["folders"].table().select().eq().eq.assert_called_with("user_id", mock_authenticate_user)
>       mock_supabase["folders"].table().delete.assert_called_once()
E       AssertionError: Expected 'delete' to have been called once. Called 2 times.
E       Calls: [call(), call().eq(), call(), call().eq('id', 1), call().eq().execute()].

tests/test_prompts_folders.py:237: AssertionError
----------------------------- Captured stdout call -----------------------------
authorization========== <class 'str'>
authorization========== Bearer fake_valid_token
token========== <class 'str'>
user_info========== <MagicMock name='supabase.auth.get_user()' id='4463097024'>
_______________________________ test_pin_folder ________________________________

test_client = <starlette.testclient.TestClient object at 0x10a204850>
mock_supabase = {'auth': <MagicMock name='supabase' id='4465515616'>, 'folders': <MagicMock name='supabase' id='4466705264'>, 'helpers': <MagicMock name='supabase' id='4466811248'>, 'notification_service': <MagicMock name='supabase' id='4466540800'>, ...}
valid_auth_header = {'Authorization': 'Bearer fake_valid_token'}
mock_authenticate_user = '00000000-0000-0000-0000-000000000000'

    def test_pin_folder(test_client, mock_supabase, valid_auth_header, mock_authenticate_user):
        """Test pinning a folder."""
        # Mock the pinned folders response
        mock_pinned_folders = {
            "official": [2],
            "organization": []
        }
    
        # Mock the update response
        updated_pinned_folders = [1, 2]
    
        # Set up the mocks
        mock_supabase["folders"].get_user_pinned_folders = MagicMock(return_value=mock_pinned_folders)
        mock_supabase["folders"].update_user_pinned_folders = MagicMock(
            return_value={"success": True, "pinned_folders": updated_pinned_folders}
        )
    
        # Make the request
        response = test_client.post("/prompts/folders/pin/1", headers=valid_auth_header)
    
        # Assertions
        assert response.status_code == 200
        assert response.json()["success"] == True
        assert "pinned_folders" in response.json()
>       assert response.json()["pinned_folders"] == updated_pinned_folders
E       assert {} == [1, 2]
E         
E         Use -v to get more diff

tests/test_prompts_folders.py:264: AssertionError
----------------------------- Captured stdout call -----------------------------
authorization========== <class 'str'>
authorization========== Bearer fake_valid_token
token========== <class 'str'>
user_info========== <MagicMock name='supabase.auth.get_user()' id='4463403472'>
______________________________ test_unpin_folder _______________________________

test_client = <starlette.testclient.TestClient object at 0x10a3e0160>
mock_supabase = {'auth': <MagicMock name='supabase' id='4466811152'>, 'folders': <MagicMock name='supabase' id='4473134176'>, 'helpers': <MagicMock name='supabase' id='4467803088'>, 'notification_service': <MagicMock name='supabase' id='4467804864'>, ...}
valid_auth_header = {'Authorization': 'Bearer fake_valid_token'}
mock_authenticate_user = '00000000-0000-0000-0000-000000000000'

    def test_unpin_folder(test_client, mock_supabase, valid_auth_header, mock_authenticate_user):
        """Test unpinning a folder."""
        # Mock the pinned folders response
        mock_pinned_folders = {
            "official": [1, 2],
            "organization": []
        }
    
        # Mock the update response
        updated_pinned_folders = [2]
    
        # Set up the mocks
        mock_supabase["folders"].get_user_pinned_folders = MagicMock(return_value=mock_pinned_folders)
        mock_supabase["folders"].update_user_pinned_folders = MagicMock(
            return_value={"success": True, "pinned_folders": updated_pinned_folders}
        )
    
        # Make the request
        response = test_client.post("/prompts/folders/unpin/1", headers=valid_auth_header)
    
        # Assertions
        assert response.status_code == 200
        assert response.json()["success"] == True
        assert "pinned_folders" in response.json()
>       assert response.json()["pinned_folders"] == updated_pinned_folders
E       assert {} == [2]
E         
E         Use -v to get more diff

tests/test_prompts_folders.py:296: AssertionError
----------------------------- Captured stdout call -----------------------------
authorization========== <class 'str'>
authorization========== Bearer fake_valid_token
token========== <class 'str'>
user_info========== <MagicMock name='supabase.auth.get_user()' id='4466431056'>
__________________________ test_update_pinned_folders __________________________

self = <MagicMock name='supabase.update_user_pinned_folders' id='4475748608'>
args = ('00000000-0000-0000-0000-000000000000', 'official', [2, 3]), kwargs = {}
expected = call('00000000-0000-0000-0000-000000000000', 'official', [2, 3])
cause = None, actual = []
expected_string = "update_user_pinned_folders('00000000-0000-0000-0000-000000000000', 'official', [2, 3])"

    def assert_any_call(self, /, *args, **kwargs):
        """assert the mock has been called with the specified arguments.
    
        The assert passes if the mock has *ever* been called, unlike
        `assert_called_with` and `assert_called_once_with` that only pass if
        the call is the most recent one."""
        expected = self._call_matcher(_Call((args, kwargs), two=True))
        cause = expected if isinstance(expected, Exception) else None
        actual = [self._call_matcher(c) for c in self.call_args_list]
        if cause or expected not in _AnyComparer(actual):
            expected_string = self._format_mock_call_signature(args, kwargs)
>           raise AssertionError(
                '%s call not found' % expected_string
            ) from cause
E           AssertionError: update_user_pinned_folders('00000000-0000-0000-0000-000000000000', 'official', [2, 3]) call not found

../../.pyenv/versions/3.10.6/lib/python3.10/unittest/mock.py:990: AssertionError

During handling of the above exception, another exception occurred:

test_client = <starlette.testclient.TestClient object at 0x10a9ebeb0>
mock_supabase = {'auth': <MagicMock name='supabase' id='4473128320'>, 'folders': <MagicMock name='supabase' id='4463929152'>, 'helpers': <MagicMock name='supabase' id='4463898496'>, 'notification_service': <MagicMock name='supabase' id='4464594704'>, ...}
valid_auth_header = {'Authorization': 'Bearer fake_valid_token'}
mock_authenticate_user = '00000000-0000-0000-0000-000000000000'

    def test_update_pinned_folders(test_client, mock_supabase, valid_auth_header, mock_authenticate_user):
        """Test updating all pinned folders."""
        # Mock the update responses
        mock_supabase["folders"].update_user_pinned_folders = MagicMock(
            side_effect=[
                {"success": True, "pinned_folders": [2, 3]},
                {"success": True, "pinned_folders": [5]}
            ]
        )
    
        # Make the request
        request_data = {
            "official_folder_ids": [2, 3],
            "organization_folder_ids": [5]
        }
    
        response = test_client.post("/prompts/folders/update-pinned", json=request_data, headers=valid_auth_header)
    
        # Assertions
        assert response.status_code == 200
        assert response.json()["success"] == True
        assert "pinnedOfficialFolderIds" in response.json()
        assert "pinnedOrganizationFolderIds" in response.json()
        assert response.json()["pinnedOfficialFolderIds"] == [2, 3]
        assert response.json()["pinnedOrganizationFolderIds"] == [5]
    
        # Verify helper functions were called correctly
>       mock_supabase["folders"].update_user_pinned_folders.assert_any_call(
            mock_authenticate_user, "official", [2, 3]
        )
E       AssertionError: update_user_pinned_folders('00000000-0000-0000-0000-000000000000', 'official', [2, 3]) call not found

tests/test_prompts_folders.py:331: AssertionError
----------------------------- Captured stdout call -----------------------------
authorization========== <class 'str'>
authorization========== Bearer fake_valid_token
token========== <class 'str'>
user_info========== <MagicMock name='supabase.auth.get_user()' id='4475452576'>
______________________________ test_save_message _______________________________

self = <MagicMock name='supabase.table().insert' id='4471636560'>

    def assert_called_once(self):
        """assert that the mock was called only once.
        """
        if not self.call_count == 1:
            msg = ("Expected '%s' to have been called once. Called %s times.%s"
                   % (self._mock_name or 'mock',
                      self.call_count,
                      self._calls_repr()))
>           raise AssertionError(msg)
E           AssertionError: Expected 'insert' to have been called once. Called 2 times.
E           Calls: [call(),
E            call({'user_id': '00000000-0000-0000-0000-000000000000', 'message_provider_id': 'msg_123', 'content': 'This is a test message', 'role': 'user', 'chat_provider_id': 'chat_456', 'model': 'gpt-4', 'created_at': '2024-03-02T13:00:00+00:00'}),
E            call().execute()].

../../.pyenv/versions/3.10.6/lib/python3.10/unittest/mock.py:898: AssertionError

During handling of the above exception, another exception occurred:

test_client = <starlette.testclient.TestClient object at 0x10a1c4e50>
mock_supabase = {'auth': <MagicMock name='supabase' id='4464197584'>, 'folders': <MagicMock name='supabase' id='4469989888'>, 'helpers': <MagicMock name='supabase' id='4470293696'>, 'notification_service': <MagicMock name='supabase' id='4467527680'>, ...}
valid_auth_header = {'Authorization': 'Bearer fake_valid_token'}
mock_authenticate_user = '00000000-0000-0000-0000-000000000000'

    def test_save_message(test_client, mock_supabase, valid_auth_header, mock_authenticate_user):
        """Test saving a chat message."""
        # Mock the insert response
        saved_message = {
            "id": 1,
            "user_id": mock_authenticate_user,
            "message_provider_id": "msg_123",
            "content": "This is a test message",
            "role": "user",
            "chat_provider_id": "chat_456",
            "model": "gpt-4",
            "created_at": "2025-03-10T12:00:00+00:00"
        }
    
        mock_supabase["save"].table().insert().execute.return_value.data = [saved_message]
    
        # Message data
        message_data = {
            "message_provider_id": "msg_123",
            "content": "This is a test message",
            "role": "user",
            "chat_provider_id": "chat_456",
            "model": "gpt-4",
            "created_at": 1709384400.0,  # 2024-03-02T12:00:00+00:00 in timestamp
            "parent_message_provider_id": None
        }
    
        # Make the request
        response = test_client.post("/save/message", json=message_data, headers=valid_auth_header)
    
        # Assertions
        assert response.status_code == 200
        assert response.json()["success"] == True
        assert response.json()["data"][0]["id"] == 1
        assert response.json()["data"][0]["message_provider_id"] == "msg_123"
    
        # Verify Supabase client was called correctly
        mock_supabase["save"].table.assert_called_with("messages")
        # Check that insert was called with appropriate user_id
>       mock_supabase["save"].table().insert.assert_called_once()
E       AssertionError: Expected 'insert' to have been called once. Called 2 times.
E       Calls: [call(),
E        call({'user_id': '00000000-0000-0000-0000-000000000000', 'message_provider_id': 'msg_123', 'content': 'This is a test message', 'role': 'user', 'chat_provider_id': 'chat_456', 'model': 'gpt-4', 'created_at': '2024-03-02T13:00:00+00:00'}),
E        call().execute()].
E       
E       pytest introspection follows:
E       
E       Args:
E       assert ({'chat_provi...g_123', ...},) == ()
E         
E         Left contains one more item: {'chat_provider_id': 'chat_456', 'content': 'This is a test message', 'created_at': '2024-03-02T13:00:00+00:00', 'message_provider_id': 'msg_123', ...}
E         Use -v to get more diff

tests/test_save.py:44: AssertionError
----------------------------- Captured stdout call -----------------------------
authorization========== <class 'str'>
authorization========== Bearer fake_valid_token
token========== <class 'str'>
user_info========== <MagicMock name='supabase.auth.get_user()' id='4466808176'>
message message_provider_id='msg_123' content='This is a test message' role='user' chat_provider_id='chat_456' model='gpt-4' created_at=1709384400.0 parent_message_provider_id=None
________________________________ test_save_chat ________________________________

self = <MagicMock name='supabase.table().insert' id='4468044224'>

    def assert_called_once(self):
        """assert that the mock was called only once.
        """
        if not self.call_count == 1:
            msg = ("Expected '%s' to have been called once. Called %s times.%s"
                   % (self._mock_name or 'mock',
                      self.call_count,
                      self._calls_repr()))
>           raise AssertionError(msg)
E           AssertionError: Expected 'insert' to have been called once. Called 2 times.
E           Calls: [call(),
E            call({'user_id': '00000000-0000-0000-0000-000000000000', 'chat_provider_id': 'chat_456', 'title': 'Test Chat', 'provider_name': 'ChatGPT'}),
E            call().execute()].

../../.pyenv/versions/3.10.6/lib/python3.10/unittest/mock.py:898: AssertionError

During handling of the above exception, another exception occurred:

test_client = <starlette.testclient.TestClient object at 0x10a6ea2c0>
mock_supabase = {'auth': <MagicMock name='supabase' id='4469986048'>, 'folders': <MagicMock name='supabase' id='4463382528'>, 'helpers': <MagicMock name='supabase' id='4462348752'>, 'notification_service': <MagicMock name='supabase' id='4465512688'>, ...}
valid_auth_header = {'Authorization': 'Bearer fake_valid_token'}
mock_authenticate_user = '00000000-0000-0000-0000-000000000000'

    def test_save_chat(test_client, mock_supabase, valid_auth_header, mock_authenticate_user):
        """Test saving a chat session."""
        # Mock the select response (no existing chat)
        mock_supabase["save"].table().select().eq().eq().execute.return_value.data = []
    
        # Mock the insert response
        saved_chat = {
            "id": 1,
            "user_id": mock_authenticate_user,
            "chat_provider_id": "chat_456",
            "title": "Test Chat",
            "provider_name": "ChatGPT",
            "created_at": "2025-03-10T12:00:00+00:00"
        }
    
        mock_supabase["save"].table().insert().execute.return_value.data = [saved_chat]
    
        # Chat data
        chat_data = {
            "chat_provider_id": "chat_456",
            "title": "Test Chat",
            "provider_name": "ChatGPT"
        }
    
        # Make the request
        response = test_client.post("/save/chat", json=chat_data, headers=valid_auth_header)
    
        # Assertions
        assert response.status_code == 200
        assert response.json()["success"] == True
        assert response.json()["data"][0]["id"] == 1
        assert response.json()["data"][0]["chat_provider_id"] == "chat_456"
    
        # Verify Supabase client was called correctly
        mock_supabase["save"].table.assert_called_with("chats")
        mock_supabase["save"].table().select().eq.assert_called_with("user_id", mock_authenticate_user)
        mock_supabase["save"].table().select().eq().eq.assert_called_with("chat_provider_id", "chat_456")
>       mock_supabase["save"].table().insert.assert_called_once()
E       AssertionError: Expected 'insert' to have been called once. Called 2 times.
E       Calls: [call(),
E        call({'user_id': '00000000-0000-0000-0000-000000000000', 'chat_provider_id': 'chat_456', 'title': 'Test Chat', 'provider_name': 'ChatGPT'}),
E        call().execute()].
E       
E       pytest introspection follows:
E       
E       Args:
E       assert ({'chat_provi...0000000000'},) == ()
E         
E         Left contains one more item: {'chat_provider_id': 'chat_456', 'provider_name': 'ChatGPT', 'title': 'Test Chat', 'user_id': '00000000-0000-0000-0000-000000000000'}
E         Use -v to get more diff

tests/test_save.py:87: AssertionError
----------------------------- Captured stdout call -----------------------------
authorization========== <class 'str'>
authorization========== Bearer fake_valid_token
token========== <class 'str'>
user_info========== <MagicMock name='supabase.auth.get_user()' id='4469060608'>
__________________________ test_update_existing_chat ___________________________

self = <MagicMock name='supabase.table().update' id='4472068208'>

    def assert_called_once(self):
        """assert that the mock was called only once.
        """
        if not self.call_count == 1:
            msg = ("Expected '%s' to have been called once. Called %s times.%s"
                   % (self._mock_name or 'mock',
                      self.call_count,
                      self._calls_repr()))
>           raise AssertionError(msg)
E           AssertionError: Expected 'update' to have been called once. Called 2 times.
E           Calls: [call(),
E            call().eq(),
E            call().eq().eq(),
E            call({'title': 'Updated Title', 'provider_name': 'ChatGPT'}),
E            call().eq('user_id', '00000000-0000-0000-0000-000000000000'),
E            call().eq().eq('chat_provider_id', 'chat_456'),
E            call().eq().eq().execute()].

../../.pyenv/versions/3.10.6/lib/python3.10/unittest/mock.py:898: AssertionError

During handling of the above exception, another exception occurred:

test_client = <starlette.testclient.TestClient object at 0x10a09ce80>
mock_supabase = {'auth': <MagicMock name='supabase' id='4463391312'>, 'folders': <MagicMock name='supabase' id='4465343072'>, 'helpers': <MagicMock name='supabase' id='4465717552'>, 'notification_service': <MagicMock name='supabase' id='4465727984'>, ...}
valid_auth_header = {'Authorization': 'Bearer fake_valid_token'}
mock_authenticate_user = '00000000-0000-0000-0000-000000000000'

    def test_update_existing_chat(test_client, mock_supabase, valid_auth_header, mock_authenticate_user):
        """Test updating an existing chat session."""
        # Mock the select response (existing chat)
        existing_chat = {
            "id": 1,
            "user_id": mock_authenticate_user,
            "chat_provider_id": "chat_456",
            "title": "Old Title",
            "provider_name": "ChatGPT",
            "created_at": "2025-03-10T12:00:00+00:00"
        }
    
        mock_supabase["save"].table().select().eq().eq().execute.return_value.data = [existing_chat]
    
        # Mock the update response
        updated_chat = {
            "id": 1,
            "user_id": mock_authenticate_user,
            "chat_provider_id": "chat_456",
            "title": "Updated Title",
            "provider_name": "ChatGPT",
            "created_at": "2025-03-10T12:00:00+00:00"
        }
    
        mock_supabase["save"].table().update().eq().eq().execute.return_value.data = [updated_chat]
    
        # Chat data for update
        chat_data = {
            "chat_provider_id": "chat_456",
            "title": "Updated Title",
            "provider_name": "ChatGPT"
        }
    
        # Make the request
        response = test_client.post("/save/chat", json=chat_data, headers=valid_auth_header)
    
        # Assertions
        assert response.status_code == 200
        assert response.json()["success"] == True
        assert response.json()["data"][0]["id"] == 1
        assert response.json()["data"][0]["title"] == "Updated Title"
    
        # Verify Supabase client was called correctly
>       mock_supabase["save"].table().update.assert_called_once()
E       AssertionError: Expected 'update' to have been called once. Called 2 times.
E       Calls: [call(),
E        call().eq(),
E        call().eq().eq(),
E        call({'title': 'Updated Title', 'provider_name': 'ChatGPT'}),
E        call().eq('user_id', '00000000-0000-0000-0000-000000000000'),
E        call().eq().eq('chat_provider_id', 'chat_456'),
E        call().eq().eq().execute()].
E       
E       pytest introspection follows:
E       
E       Args:
E       assert ({'provider_n...ated Title'},) == ()
E         
E         Left contains one more item: {'provider_name': 'ChatGPT', 'title': 'Updated Title'}
E         Use -v to get more diff

tests/test_save.py:132: AssertionError
----------------------------- Captured stdout call -----------------------------
authorization========== <class 'str'>
authorization========== Bearer fake_valid_token
token========== <class 'str'>
user_info========== <MagicMock name='supabase.auth.get_user()' id='4470393680'>
___________________________ test_save_user_metadata ____________________________

self = <MagicMock name='supabase.table().insert' id='4468833104'>

    def assert_called_once(self):
        """assert that the mock was called only once.
        """
        if not self.call_count == 1:
            msg = ("Expected '%s' to have been called once. Called %s times.%s"
                   % (self._mock_name or 'mock',
                      self.call_count,
                      self._calls_repr()))
>           raise AssertionError(msg)
E           AssertionError: Expected 'insert' to have been called once. Called 2 times.
E           Calls: [call(),
E            call({'additional_email': 'user@example.com', 'name': 'Test User', 'phone_number': '+123456789', 'additional_organization': 'Test Org', 'user_id': '00000000-0000-0000-0000-000000000000'}),
E            call().execute()].

../../.pyenv/versions/3.10.6/lib/python3.10/unittest/mock.py:898: AssertionError

During handling of the above exception, another exception occurred:

test_client = <starlette.testclient.TestClient object at 0x10a2d9870>
mock_supabase = {'auth': <MagicMock name='supabase' id='4465727552'>, 'folders': <MagicMock name='supabase' id='4473221952'>, 'helpers': <MagicMock name='supabase' id='4469220704'>, 'notification_service': <MagicMock name='supabase' id='4462155360'>, ...}
valid_auth_header = {'Authorization': 'Bearer fake_valid_token'}
mock_authenticate_user = '00000000-0000-0000-0000-000000000000'

    def test_save_user_metadata(test_client, mock_supabase, valid_auth_header, mock_authenticate_user):
        """Test saving user metadata."""
        # Mock the select response (no existing metadata)
        mock_supabase["save"].table().select().eq().execute.return_value.data = []
    
        # Mock the insert response
        saved_metadata = {
            "id": 1,
            "user_id": mock_authenticate_user,
            "additional_email": "user@example.com",
            "name": "Test User",
            "phone_number": "+123456789",
            "additional_organization": "Test Org",
            "created_at": "2025-03-10T12:00:00+00:00"
        }
    
        mock_supabase["save"].table().insert().execute.return_value.data = [saved_metadata]
    
        # Metadata data
        metadata_data = {
            "email": "user@example.com",
            "name": "Test User",
            "phone_number": "+123456789",
            "org_name": "Test Org"
        }
    
        # Make the request
        response = test_client.post("/save/user_metadata", json=metadata_data, headers=valid_auth_header)
    
        # Assertions
        assert response.status_code == 200
        assert response.json()["success"] == True
        assert response.json()["data"][0]["id"] == 1
        assert response.json()["data"][0]["additional_email"] == "user@example.com"
    
        # Verify Supabase client was called correctly
        mock_supabase["save"].table.assert_called_with("users_metadata")
        mock_supabase["save"].table().select().eq.assert_called_with("user_id", mock_authenticate_user)
>       mock_supabase["save"].table().insert.assert_called_once()
E       AssertionError: Expected 'insert' to have been called once. Called 2 times.
E       Calls: [call(),
E        call({'additional_email': 'user@example.com', 'name': 'Test User', 'phone_number': '+123456789', 'additional_organization': 'Test Org', 'user_id': '00000000-0000-0000-0000-000000000000'}),
E        call().execute()].
E       
E       pytest introspection follows:
E       
E       Args:
E       assert ({'additional...56789', ...},) == ()
E         
E         Left contains one more item: {'additional_email': 'user@example.com', 'additional_organization': 'Test Org', 'name': 'Test User', 'phone_number': '+123456789', ...}
E         Use -v to get more diff

tests/test_save.py:174: AssertionError
----------------------------- Captured stdout call -----------------------------
authorization========== <class 'str'>
authorization========== Bearer fake_valid_token
token========== <class 'str'>
user_info========== <MagicMock name='supabase.auth.get_user()' id='4464718176'>
Saving user metadata for user 00000000-0000-0000-0000-000000000000 with metadata email='user@example.com' name='Test User' picture=None phone_number='+123456789' org_name='Test Org'
___________________________ test_batch_save_messages ___________________________

self = <MagicMock name='supabase.table().insert' id='4470296864'>

    def assert_called_once(self):
        """assert that the mock was called only once.
        """
        if not self.call_count == 1:
            msg = ("Expected '%s' to have been called once. Called %s times.%s"
                   % (self._mock_name or 'mock',
                      self.call_count,
                      self._calls_repr()))
>           raise AssertionError(msg)
E           AssertionError: Expected 'insert' to have been called once. Called 2 times.
E           Calls: [call(),
E            call([{'user_id': '00000000-0000-0000-0000-000000000000', 'message_provider_id': 'msg_123', 'content': 'This is a test message 1', 'role': 'user', 'chat_provider_id': 'chat_456', 'model': 'gpt-4', 'created_at': '2024-03-02T13:00:00+00:00'}, {'user_id': '00000000-0000-0000-0000-000000000000', 'message_provider_id': 'msg_124', 'content': 'This is a test message 2', 'role': 'assistant', 'chat_provider_id': 'chat_456', 'model': 'gpt-4', 'created_at': '2024-03-02T13:00:10+00:00', 'parent_message_provider_id': 'msg_123'}]),
E            call().execute()].

../../.pyenv/versions/3.10.6/lib/python3.10/unittest/mock.py:898: AssertionError

During handling of the above exception, another exception occurred:

test_client = <starlette.testclient.TestClient object at 0x10a9ff580>
mock_supabase = {'auth': <MagicMock name='supabase' id='4473210096'>, 'folders': <MagicMock name='supabase' id='4465586288'>, 'helpers': <MagicMock name='supabase' id='4465673120'>, 'notification_service': <MagicMock name='supabase' id='4467532576'>, ...}
valid_auth_header = {'Authorization': 'Bearer fake_valid_token'}
mock_authenticate_user = '00000000-0000-0000-0000-000000000000'

    def test_batch_save_messages(test_client, mock_supabase, valid_auth_header, mock_authenticate_user):
        """Test batch saving messages."""
        # Messages to save
        messages = [
            {
                "message_provider_id": "msg_123",
                "content": "This is a test message 1",
                "role": "user",
                "chat_provider_id": "chat_456",
                "model": "gpt-4",
                "created_at": 1709384400.0
            },
            {
                "message_provider_id": "msg_124",
                "content": "This is a test message 2",
                "role": "assistant",
                "chat_provider_id": "chat_456",
                "model": "gpt-4",
                "created_at": 1709384410.0,
                "parent_message_provider_id": "msg_123"
            }
        ]
    
        # Mock the existing messages check
        mock_supabase["save"].table().select().eq().in_().execute.return_value.data = []
    
        # Mock the insert response
        saved_messages = [
            {
                "id": 1,
                "user_id": mock_authenticate_user,
                "message_provider_id": "msg_123",
                "content": "This is a test message 1",
                "role": "user",
                "chat_provider_id": "chat_456",
                "model": "gpt-4",
                "created_at": "2025-03-10T12:00:00+00:00"
            },
            {
                "id": 2,
                "user_id": mock_authenticate_user,
                "message_provider_id": "msg_124",
                "content": "This is a test message 2",
                "role": "assistant",
                "chat_provider_id": "chat_456",
                "model": "gpt-4",
                "created_at": "2025-03-10T12:00:10+00:00",
                "parent_message_provider_id": "msg_123"
            }
        ]
    
        mock_supabase["save"].table().insert().execute.return_value.data = saved_messages
    
        # Make the request
        response = test_client.post("/save/batch/message", json={"messages": messages}, headers=valid_auth_header)
    
        # Assertions
        assert response.status_code == 200
        assert response.json()["success"] == True
        assert response.json()["saved_count"] == 2
        assert response.json()["skipped_count"] == 0
        assert response.json()["total_count"] == 2
    
        # Verify Supabase client was called correctly
        mock_supabase["save"].table.assert_called_with("messages")
        mock_supabase["save"].table().select().eq.assert_called_with("user_id", mock_authenticate_user)
>       mock_supabase["save"].table().insert.assert_called_once()
E       AssertionError: Expected 'insert' to have been called once. Called 2 times.
E       Calls: [call(),
E        call([{'user_id': '00000000-0000-0000-0000-000000000000', 'message_provider_id': 'msg_123', 'content': 'This is a test message 1', 'role': 'user', 'chat_provider_id': 'chat_456', 'model': 'gpt-4', 'created_at': '2024-03-02T13:00:00+00:00'}, {'user_id': '00000000-0000-0000-0000-000000000000', 'message_provider_id': 'msg_124', 'content': 'This is a test message 2', 'role': 'assistant', 'chat_provider_id': 'chat_456', 'model': 'gpt-4', 'created_at': '2024-03-02T13:00:10+00:00', 'parent_message_provider_id': 'msg_123'}]),
E        call().execute()].
E       
E       pytest introspection follows:
E       
E       Args:
E       assert ([{'chat_prov..._124', ...}],) == ()
E         
E         Left contains one more item: [{'chat_provider_id': 'chat_456', 'content': 'This is a test message 1', 'created_at': '2024-03-02T13:00:00+00:00', 'm...ontent': 'This is a test message 2', 'created_at': '2024-03-02T13:00:10+00:00', 'message_provider_id': 'msg_124', ...}]
E         Use -v to get more diff

tests/test_save.py:242: AssertionError
----------------------------- Captured stdout call -----------------------------
authorization========== <class 'str'>
authorization========== Bearer fake_valid_token
token========== <class 'str'>
user_info========== <MagicMock name='supabase.auth.get_user()' id='4466073296'>
batch_data messages=[MessageData(message_provider_id='msg_123', content='This is a test message 1', role='user', chat_provider_id='chat_456', model='gpt-4', created_at=1709384400.0, parent_message_provider_id=None), MessageData(message_provider_id='msg_124', content='This is a test message 2', role='assistant', chat_provider_id='chat_456', model='gpt-4', created_at=1709384410.0, parent_message_provider_id='msg_123')]
____________________________ test_batch_save_chats _____________________________

self = <MagicMock name='supabase.table().insert' id='4469855312'>

    def assert_called_once(self):
        """assert that the mock was called only once.
        """
        if not self.call_count == 1:
            msg = ("Expected '%s' to have been called once. Called %s times.%s"
                   % (self._mock_name or 'mock',
                      self.call_count,
                      self._calls_repr()))
>           raise AssertionError(msg)
E           AssertionError: Expected 'insert' to have been called once. Called 2 times.
E           Calls: [call(),
E            call([{'user_id': '00000000-0000-0000-0000-000000000000', 'chat_provider_id': 'chat_456', 'title': 'Test Chat 1', 'provider_name': 'ChatGPT'}, {'user_id': '00000000-0000-0000-0000-000000000000', 'chat_provider_id': 'chat_457', 'title': 'Test Chat 2', 'provider_name': 'ChatGPT'}]),
E            call().execute()].

../../.pyenv/versions/3.10.6/lib/python3.10/unittest/mock.py:898: AssertionError

During handling of the above exception, another exception occurred:

test_client = <starlette.testclient.TestClient object at 0x10a2b5030>
mock_supabase = {'auth': <MagicMock name='supabase' id='4465579184'>, 'folders': <MagicMock name='supabase' id='4469844208'>, 'helpers': <MagicMock name='supabase' id='4469954672'>, 'notification_service': <MagicMock name='supabase' id='4469962688'>, ...}
valid_auth_header = {'Authorization': 'Bearer fake_valid_token'}
mock_authenticate_user = '00000000-0000-0000-0000-000000000000'

    def test_batch_save_chats(test_client, mock_supabase, valid_auth_header, mock_authenticate_user):
        """Test batch saving chats."""
        # Chats to save
        chats = [
            {
                "chat_provider_id": "chat_456",
                "title": "Test Chat 1",
                "provider_name": "ChatGPT"
            },
            {
                "chat_provider_id": "chat_457",
                "title": "Test Chat 2",
                "provider_name": "ChatGPT"
            }
        ]
    
        # Mock the existing chats check
        mock_supabase["save"].table().select().eq().in_().execute.return_value.data = []
    
        # Mock the insert response
        saved_chats = [
            {
                "id": 1,
                "user_id": mock_authenticate_user,
                "chat_provider_id": "chat_456",
                "title": "Test Chat 1",
                "provider_name": "ChatGPT",
                "created_at": "2025-03-10T12:00:00+00:00"
            },
            {
                "id": 2,
                "user_id": mock_authenticate_user,
                "chat_provider_id": "chat_457",
                "title": "Test Chat 2",
                "provider_name": "ChatGPT",
                "created_at": "2025-03-10T12:00:00+00:00"
            }
        ]
    
        mock_supabase["save"].table().insert().execute.return_value.data = saved_chats
    
        # Make the request
        response = test_client.post("/save/batch/chat", json={"chats": chats}, headers=valid_auth_header)
    
        # Assertions
        assert response.status_code == 200
        assert response.json()["success"] == True
        assert response.json()["inserted_count"] == 2
        assert response.json()["updated_count"] == 0
        assert response.json()["total_count"] == 2
    
        # Verify Supabase client was called correctly
        mock_supabase["save"].table.assert_called_with("chats")
        mock_supabase["save"].table().select().eq.assert_called_with("user_id", mock_authenticate_user)
>       mock_supabase["save"].table().insert.assert_called_once()
E       AssertionError: Expected 'insert' to have been called once. Called 2 times.
E       Calls: [call(),
E        call([{'user_id': '00000000-0000-0000-0000-000000000000', 'chat_provider_id': 'chat_456', 'title': 'Test Chat 1', 'provider_name': 'ChatGPT'}, {'user_id': '00000000-0000-0000-0000-000000000000', 'chat_provider_id': 'chat_457', 'title': 'Test Chat 2', 'provider_name': 'ChatGPT'}]),
E        call().execute()].
E       
E       pytest introspection follows:
E       
E       Args:
E       assert ([{'chat_prov...000000000'}],) == ()
E         
E         Left contains one more item: [{'chat_provider_id': 'chat_456', 'provider_name': 'ChatGPT', 'title': 'Test Chat 1', 'user_id': '00000000-0000-0000-0...d': 'chat_457', 'provider_name': 'ChatGPT', 'title': 'Test Chat 2', 'user_id': '00000000-0000-0000-0000-000000000000'}]
E         Use -v to get more diff

tests/test_save.py:298: AssertionError
----------------------------- Captured stdout call -----------------------------
authorization========== <class 'str'>
authorization========== Bearer fake_valid_token
token========== <class 'str'>
user_info========== <MagicMock name='supabase.auth.get_user()' id='4472317328'>
____________________________ test_get_user_metadata ____________________________

self = <MagicMock name='supabase.table().select' id='4471149264'>

    def assert_called_once(self):
        """assert that the mock was called only once.
        """
        if not self.call_count == 1:
            msg = ("Expected '%s' to have been called once. Called %s times.%s"
                   % (self._mock_name or 'mock',
                      self.call_count,
                      self._calls_repr()))
>           raise AssertionError(msg)
E           AssertionError: Expected 'select' to have been called once. Called 2 times.
E           Calls: [call(),
E            call().eq(),
E            call().eq().single(),
E            call('name, additional_email, phone_number, additional_organization, pinned_official_folder_ids, pinned_organization_folder_ids'),
E            call().eq('user_id', '00000000-0000-0000-0000-000000000000'),
E            call().eq().single(),
E            call().eq().single().execute()].

../../.pyenv/versions/3.10.6/lib/python3.10/unittest/mock.py:898: AssertionError

During handling of the above exception, another exception occurred:

test_client = <starlette.testclient.TestClient object at 0x10a122110>
mock_supabase = {'auth': <MagicMock name='supabase' id='4463922528'>, 'folders': <MagicMock name='supabase' id='4462904656'>, 'helpers': <MagicMock name='supabase' id='4463205376'>, 'notification_service': <MagicMock name='supabase' id='4463002144'>, ...}
valid_auth_header = {'Authorization': 'Bearer fake_valid_token'}
mock_authenticate_user = '00000000-0000-0000-0000-000000000000'

    def test_get_user_metadata(test_client, mock_supabase, valid_auth_header, mock_authenticate_user):
        """Test getting user metadata."""
        # Mock the metadata response
        mock_metadata = {
            "name": "Test User",
            "additional_email": "test@example.com",
            "phone_number": "+123456789",
            "additional_organization": "Test Org",
            "pinned_official_folder_ids": [1, 2],
            "pinned_organization_folder_ids": [3]
        }
    
        mock_supabase["user"].table().select().eq().single().execute.return_value.data = mock_metadata
    
        # Make the request
        response = test_client.get("/user/metadata", headers=valid_auth_header)
    
        # Assertions
        assert response.status_code == 200
        assert response.json()["success"] == True
        assert "data" in response.json()
        assert response.json()["data"]["name"] == "Test User"
        assert response.json()["data"]["additional_email"] == "test@example.com"
        assert response.json()["data"]["pinned_official_folder_ids"] == [1, 2]
    
        # Verify Supabase client was called correctly
        mock_supabase["user"].table.assert_called_with("users_metadata")
>       mock_supabase["user"].table().select.assert_called_once()
E       AssertionError: Expected 'select' to have been called once. Called 2 times.
E       Calls: [call(),
E        call().eq(),
E        call().eq().single(),
E        call('name, additional_email, phone_number, additional_organization, pinned_official_folder_ids, pinned_organization_folder_ids'),
E        call().eq('user_id', '00000000-0000-0000-0000-000000000000'),
E        call().eq().single(),
E        call().eq().single().execute()].
E       
E       pytest introspection follows:
E       
E       Args:
E       assert ('name, addit..._folder_ids',) == ()
E         
E         Left contains one more item: 'name, additional_email, phone_number, additional_organization, pinned_official_folder_ids, pinned_organization_folder_ids'
E         Use -v to get more diff

tests/test_user.py:31: AssertionError
----------------------------- Captured stdout call -----------------------------
authorization========== <class 'str'>
authorization========== Bearer fake_valid_token
token========== <class 'str'>
user_info========== <MagicMock name='supabase.auth.get_user()' id='4462214256'>
=========================== short test summary info ============================
FAILED tests/test_auth.py::test_sign_in_success - AttributeError: _mock_methods
FAILED tests/test_main.py::test_health_check_degraded - AssertionError: Expec...
FAILED tests/test_prompt_templates.py::test_get_templates - assert 0 == 2
FAILED tests/test_prompt_templates.py::test_get_templates_by_type - assert 0 ...
FAILED tests/test_prompt_templates.py::test_create_template - AssertionError:...
FAILED tests/test_prompt_templates.py::test_update_template - assert 500 == 200
FAILED tests/test_prompt_templates.py::test_delete_template - AssertionError:...
FAILED tests/test_prompt_templates.py::test_track_template_usage - AssertionE...
FAILED tests/test_prompts_folders.py::test_get_folders - assert 0 == 2
FAILED tests/test_prompts_folders.py::test_get_folders_by_type - assert 0 == 2
FAILED tests/test_prompts_folders.py::test_create_folder - AssertionError: Ex...
FAILED tests/test_prompts_folders.py::test_update_folder - AssertionError: Ex...
FAILED tests/test_prompts_folders.py::test_delete_folder - AssertionError: Ex...
FAILED tests/test_prompts_folders.py::test_pin_folder - assert {} == [1, 2]
FAILED tests/test_prompts_folders.py::test_unpin_folder - assert {} == [2]
FAILED tests/test_prompts_folders.py::test_update_pinned_folders - AssertionE...
FAILED tests/test_save.py::test_save_message - AssertionError: Expected 'inse...
FAILED tests/test_save.py::test_save_chat - AssertionError: Expected 'insert'...
FAILED tests/test_save.py::test_update_existing_chat - AssertionError: Expect...
FAILED tests/test_save.py::test_save_user_metadata - AssertionError: Expected...
FAILED tests/test_save.py::test_batch_save_messages - AssertionError: Expecte...
FAILED tests/test_save.py::test_batch_save_chats - AssertionError: Expected '...
FAILED tests/test_user.py::test_get_user_metadata - AssertionError: Expected ...
======================== 23 failed, 14 passed in 3.77s =========================
