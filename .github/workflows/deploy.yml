# .github/workflows/deploy-optimized.yml
name: Optimized Build and Deploy to Cloud Run

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REPOSITORY: jaydai-backend
  IMAGE_NAME: archimind-backend
  REGION: europe-west1

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'  # Upgrade to Python 3.11 for better performance
          
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-xdist  # Add parallel test execution
      
      - name: Run tests in parallel
        run: |
          pytest tests/ -n auto --cov=./ --cov-report=xml
      
      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  build-and-deploy:
    name: Build and Deploy
    needs: [test]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set environment based on branch
        id: set-env
        run: |
          if [[ ${{ github.ref }} == 'refs/heads/main' ]]; then
            echo "ENVIRONMENT=prod" >> $GITHUB_ENV
            echo "SERVICE_NAME=api-prod" >> $GITHUB_ENV
            echo "CUSTOM_DOMAIN=api.prod.jayd.ai" >> $GITHUB_ENV
            echo "MIN_INSTANCES=1" >> $GITHUB_ENV  # Keep warm in production
            echo "MAX_INSTANCES=20" >> $GITHUB_ENV
            echo "CPU_LIMIT=2" >> $GITHUB_ENV
            echo "MEMORY_LIMIT=2Gi" >> $GITHUB_ENV
            echo "CONCURRENCY=100" >> $GITHUB_ENV
          elif [[ ${{ github.ref }} == 'refs/heads/develop' ]]; then
            echo "ENVIRONMENT=dev" >> $GITHUB_ENV
            echo "SERVICE_NAME=api-dev" >> $GITHUB_ENV
            echo "CUSTOM_DOMAIN=api.dev.jayd.ai" >> $GITHUB_ENV
            echo "MIN_INSTANCES=0" >> $GITHUB_ENV
            echo "MAX_INSTANCES=10" >> $GITHUB_ENV
            echo "CPU_LIMIT=1" >> $GITHUB_ENV
            echo "MEMORY_LIMIT=1Gi" >> $GITHUB_ENV
            echo "CONCURRENCY=50" >> $GITHUB_ENV
          fi
          
      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
          
      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v1
        
      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev
          
      - name: Build optimized Docker image
        run: |
          IMAGE_TAG="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}-${{ env.ENVIRONMENT }}:${{ github.sha }}"
          echo "Building optimized image: $IMAGE_TAG"
          
          # Build with optimizations
          docker build \
            --target production \
            --build-arg ENVIRONMENT=${{ env.ENVIRONMENT }} \
            -t $IMAGE_TAG \
            -f Dockerfile.optimized .
          
          docker push $IMAGE_TAG
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          
      - name: Deploy to Cloud Run with optimized settings
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: ${{ env.SERVICE_NAME }}
          region: ${{ env.REGION }}
          image: ${{ env.IMAGE_TAG }}
          flags: |
            --allow-unauthenticated 
            --cpu=${{ env.CPU_LIMIT }} 
            --memory=${{ env.MEMORY_LIMIT }}
            --min-instances=${{ env.MIN_INSTANCES }}
            --max-instances=${{ env.MAX_INSTANCES }}
            --concurrency=${{ env.CONCURRENCY }}
            --timeout=300
            --execution-environment=gen2
          env_vars: |
            ENVIRONMENT=${{ env.ENVIRONMENT }}
            PYTHONUNBUFFERED=1
            PYTHONDONTWRITEBYTECODE=1
            WEB_CONCURRENCY=4
            SUPABASE_URL=${{ env.SUPABASE_URL }}
            SUPABASE_SERVICE_ROLE_KEY=${{ env.SUPABASE_SERVICE_ROLE_KEY }}
            REDIS_URL=${{ secrets.REDIS_URL }}

